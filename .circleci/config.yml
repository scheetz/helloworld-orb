# CircleCI pipeline processing engine, see https://circleci.com/docs/2.0/configuration-reference/
version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@4.0.1
  helm-tools: paperspace/helm-tools@0.0.5

jobs:
  ctrz:
    executor: aws-ecr/default
    steps:
      - checkout
      - run:
          name: "Set org and repo vars"
          command: |
            org_repo=$(git config --local remote.origin.url | sed -e 's/\.git$//' -e 's,//[^/]*/,,g' -e 's,.*:,,' -e 's#/$##' | tr '[:upper:]' '[:lower:]')
            echo "export ORG_REPO='$org_repo'" >> $BASH_ENV
            pr_tag=${CIRCLE_PULL_REQUEST:+pr${CIRCLE_PULL_REQUEST##*/}_$CIRCLE_BUILD_NUM}
            branch=$(if [[ "$CIRCLE_BRANCH" = "master" ]]; then echo "latest"; else echo $CIRCLE_BRANCH; fi)
            tag=${CIRCLE_TAG:=${pr_tag:=$branch}}
            echo "export TAG='$tag'" >> $BASH_ENV
      - run:
          name: "Echo vars"
          command: |
            echo "$ORG_REPO"
            echo "$TAG"
      - aws-ecr/build-and-push-image:
          create-repo: true
          repo: $ORG_REPO
          tag: $TAG
      - run:
          name: "Apply read-only permissions for accounts"
          command: |
            if [ -n "$TARGET_ACCOUNTS" ]; then
              echo "Begin validation/correction of aws ecr policy of $ORG_REPO for $TARGET_ACCOUNTS" 1>&2
            else
              echo "No TARGET_ACCOUNTS to apply ECR policy" 1>&2
            fi

            for TARGET_ACCOUNT in ${TARGET_ACCOUNTS/,/ }; do
              ARN_STRING="arn:aws:iam::$TARGET_ACCOUNT:root"
              NEW_POLICY=$(echo "
              {
                \"Sid\": \"$TARGET_ACCOUNT\",
                \"Effect\": \"Allow\",
                \"Principal\": {
                  \"AWS\": \"arn:aws:iam::$TARGET_ACCOUNT:root\"
                },
                \"Action\": [
                  \"ecr:GetDownloadUrlForLayer\",
                  \"ecr:BatchGetImage\",
                  \"ecr:BatchCheckLayerAvailability\",
                  \"ecr:ListImages\",
                  \"ecr:DescribeRepositories\",
                  \"ecr:DescribeImages\"
                ]
              }")

              CURRENT_POLICY=$( aws ecr get-repository-policy --output json --repository-name $ORG_REPO 2>&1 || true )
              NON_EXISTENT=$( echo $CURRENT_POLICY | grep -c RepositoryPolicyNotFoundException 2>&1 || true )
              if [ $NON_EXISTENT -gt 0 ] ; then
                echo "Repository $ORG_REPO has no policy currently set" 1>&2
                BASE='{"policyText":"{\"Statement\":[]}"}'
              else
                BASE=$CURRENT_POLICY
              fi

              TARGET_EXISTS=$( echo $BASE | jq -cr .policyText  |jq --arg account $ARN_STRING '.Statement[] | select( .Principal.AWS == $account )' 2>/dev/null || echo "")
              if [ -n "$TARGET_EXISTS" ] ; then
                # TODO Overwrite the actions
                echo "policy already exists for account=$TARGET_ACCOUNT at $ORG_REPO" 1>&2
                continue
              fi
              POLICY_TEXT="$(echo $BASE | jq -cr .policyText | jq -c --argjson NEW $(echo $NEW_POLICY | jq -r '. | @json' ) '.Statement |= . + [$NEW]')"
              FINAL_COMPLETE=$(echo $BASE | jq --arg policy "$(echo $POLICY_TEXT | jq -r '. | @json')" '.policyText=$policy')
              aws ecr set-repository-policy --repository-name=$ORG_REPO --cli-input-json "$FINAL_COMPLETE" 1>&2
              for i in {0..10}; do
                local CHECK_POLICY=$( aws ecr get-repository-policy --repository-name $ORG_REPO | grep -c $TARGET_ACCOUNT )
                if [ $CHECK_POLICY -gt 0 ]; then
                  break
                fi
                sleep .$i
              done
            done

workflows:
  version: 2
  build_docker_image:
    jobs:
    - ctrz:
        context: ecr
        filters:
          tags:
            only: /.*/
    - helm-tools/package_and_publish:
        chart_name: $ORG_REPO
        chart_version: 1.0

